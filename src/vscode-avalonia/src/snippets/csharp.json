{
	"Avalonia attached property": {
		"prefix": "attachedAvaloniaProperty",
		"body": [
			"/// <summary>",
			"/// ${1:MyProperty} AttachedProperty definition",
			"/// indicates $2.",
			"/// </summary>",
			"public static readonly AttachedProperty<${3:type}> ${1:MyProperty}Property =",
			"    AvaloniaProperty.RegisterAttached<${4:${TM_FILENAME_BASE}}, ${5:StyledElement} ,${3:type}>(\"${1:MyProperty}\");",
			"",
			"/// <summary>",
			"/// <param name=\"element\">Target element</param>",
			"/// <param name=\"value\">The value to set  <see cref=\"${1:MyProperty}Property\"/>.</param>",
			"/// </summary>",
			"",
			"public static void Set${1:MyProperty}(${5:StyledElement} element, ${3:type} value) =>",
			"    element.SetValue(${1:MyProperty}Property, value);",
			"",
			"/// <summary>",
			"/// Accessor for Attached property <see cref=\"${1:MyProperty}Property\"/>.",
			"/// <param name=\"element\">Target element</param>",
			"/// </summary>",
			"public static ${3:type} Get${1:MyProperty}(${5:StyledElement} element) =>",
			"    element.GetValue(${1:MyProperty}Property);",			
			"$0"
		],
		"description": "Attached property"
	},
	"Avalonia attached property with default value": {
		"prefix": "attachedAvaloniaProperty",
		"body": [
			"/// <summary>",
			"/// ${1:MyProperty} AttachedProperty definition",
			"/// indicates $2.",
			"/// </summary>",
			"public static readonly AttachedProperty<${3:type}> ${1:MyProperty}Property =",
			"    AvaloniaProperty.RegisterAttached<${4:${TM_FILENAME_BASE}}, ${5:StyledElement} ,${3:type}>(\"${1:MyProperty}\", ${6:default});",
			"",
			"/// <summary>",
			"/// <param name=\"element\">Target element</param>",
			"/// <param name=\"value\">The value to set  <see cref=\"${1:MyProperty}Property\"/>.</param>",
			"/// </summary>",
			"",
			"public static void Set${1:MyProperty}(${5:StyledElement} element, ${3:type} value) =>",
			"    element.SetValue(${1:MyProperty}Property, value);",
			"",
			"/// <summary>",
			"/// Accessor for Attached property <see cref=\"${1:MyProperty}Property\"/>.",
			"/// <param name=\"element\">Target element</param>",
			"/// </summary>",
			"public static ${3:type} Get${1:MyProperty}(${5:StyledElement} element) =>",
			"    element.GetValue(${1:MyProperty}Property);",			
			"$0"
		],
		"description": "Attached property"
	},
	"Avalonia DirectProperty": {
		"prefix": "directProperty",
		"body": [
			"/// <summary>",
			"/// ${1:MyProperty} DirectProperty definition",
			"/// indicates $2.",
			"/// </summary>",
			"public static readonly DirectProperty<${3:${TM_FILENAME_BASE}}, ${4:type}> ${1:MyProperty}Property =",
			"    AvaloniaProperty.RegisterDirect<${3:${TM_FILENAME_BASE}}, ${4:type}>(nameof(${1:MyProperty}),",
			"         o => o.${1:MyProperty},",
			"         (o, v) => o.${1:MyProperty} = v);",
			"",
			"private ${4:type} _${1:MyProperty} = default;",
			"/// <summary>",
			"/// Gets or sets the ${1:MyProperty} property. This DirectProperty",
			"/// indicates $2.",
			"/// </summary>",
			"public ${4:type} ${1:MyProperty}",
			"{",
			"   get => _${1:MyProperty};",
			"   set => SetAndRaise(${1:MyProperty}Property, ref _${1:MyProperty}, value);",
			"}",
			"$0"
		],
		"description": "Avalonia DirectProperty"
	},
	"Avalonia DirectProperty(readonly)": {
		"prefix": "directProperty",
		"body": [
			"/// <summary>",
			"/// ${1:MyProperty} DirectProperty definition",
			"/// indicates $2.",
			"/// </summary>",
			"public static readonly DirectProperty<${3:${TM_FILENAME_BASE}}, ${4:type}> ${1:MyProperty}Property =",
			"    AvaloniaProperty.RegisterDirect<${3:${TM_FILENAME_BASE}}, ${4:type}>(nameof(${1:MyProperty}),",
			"         o => o.${1:MyProperty});",
			"",
			"private ${4:type} _${1:MyProperty} = default;",
			"/// <summary>",
			"/// Gets or sets the ${1:MyProperty} property. This DirectProperty",
			"/// indicates $2.",
			"/// </summary>",
			"public ${4:type} ${1:MyProperty}",
			"{",
			"   get => _${1:MyProperty};",
			"   private set => SetAndRaise(${1:MyProperty}Property, ref _${1:MyProperty}, value);",
			"}",
			"$0"
		],
		"description": "Avalonia readonly DirectProperty"
	},
	"Avalonia StyledProperty": {
		"prefix": "styledProperty",
		"body": [
			"/// <summary>",
			"/// ${1:MyProperty} StyledProperty definition",
			"/// indicates $2.",
			"/// </summary>",
			"public static readonly StyledProperty<${4:type}> ${1:MyProperty}Property =",
			"    AvaloniaProperty.Register<${3:${TM_FILENAME_BASE}}, ${4:type}>(nameof(${1:MyProperty}));",
			"",
			"/// <summary>",
			"/// Gets or sets the ${1:MyProperty} property. This StyledProperty",
			"/// indicates $2.",
			"/// </summary>",
			"public ${4:type} ${1:MyProperty}",
			"{",
			"   get => this.GetValue(${1:MyProperty}Property);",
			"   set => SetValue(${1:MyProperty}Property, value);",
			"}",
			"$0"
		],
		"description": "Avalonia StyledProperty"
	},
	"Avalonia RoutedEvent": {
		"prefix": "routedEvent",
		"body": [
			"/// <summary>",
			"/// ${1:Event}Event is raise when ${2:...}",
			"/// </summary>",
			"public static readonly RoutedEvent<${3:RoutedEventArgs}> ${1:Event}Event =",
			"    RoutedEvent.Register<${3:RoutedEventArgs}>(\"${1:Event}\",",
			"         RoutingStrategies.${4:Bubble}, typeof(${5:${TM_FILENAME_BASE}}));",
			"$0"
		],
		"description": "Avalonia RoutedEvent"
	},
	"Avalonia RoutedEvent with handler": {
		"prefix": "routedEvent",
		"body": [
			"/// <summary>",
			"/// ${1:Event}Event is raise when ${2:...}",
			"/// </summary>",
			"public static readonly RoutedEvent<${3:RoutedEventArgs}> ${1:Event}Event =",
			"    RoutedEvent.Register<${3:RoutedEventArgs}>(\"${1:Event}\",",
			"         RoutingStrategies.${4:Bubble}, typeof(${5:${TM_FILENAME_BASE}}));",
			"",
			"public static void Add${1:Event}Handler(Interactive element, System.EventHandler<${3:RoutedEventArgs}> handler) =>",
			"    element.AddHandler(${1:Event}Event, handler);",
			"",
			"public static void Remove${1:Event}Handler(Interactive element, System.EventHandler<${3:RoutedEventArgs}> handler) =>",
			"    element.RemoveHandler(${1:Event}Event, handler);",
			"$0"
		],
		"description": "Avalonia RoutedEvent"
	},
	"Avalonia RoutedEventArgs": {
		"prefix": "routedEvent",
		"body": [
			"public class ${1:Event}RoutedEventArgs : RoutedEventArgs",
			"{",
			"    public ${1:Event}RoutedEventArgs() : base(${2:EventOwner}.${1:Event})",
			"    {",
			"    }",
			"}",
			"$0"
		],
		"description": "Avalonia RoutedEventArgs"
	}
}
